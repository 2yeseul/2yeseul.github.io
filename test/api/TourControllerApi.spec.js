/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiDocumentation);
  }
}(this, function(expect, ApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiDocumentation.TourControllerApi();
  });

  describe('(package)', function() {
    describe('TourControllerApi', function() {
      describe('saveTourArticleUsingPOST', function() {
        it('should call saveTourArticleUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for saveTourArticleUsingPOST call and complete the assertions
          /*
          var opts = {};
          opts.nickname = "nickname_example";
          opts.tourContent = "tourContent_example";
          opts.tourEndDate = "tourEndDate_example";
          opts.tourLocation = "tourLocation_example";
          opts.tourNeed = "tourNeed_example";
          opts.tourStartDate = "tourStartDate_example";
          opts.tourTeam = "tourTeam_example";
          opts.tourTitle = "tourTitle_example";

          instance.saveTourArticleUsingPOST(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.Tour);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.tourContent).to.be.a('string');
            expect(data.tourContent).to.be("");
            expect(data.tourEndDate).to.be.a('string');
            expect(data.tourEndDate).to.be("");
            expect(data.tourLocation).to.be.a('string');
            expect(data.tourLocation).to.be("");
            expect(data.tourNeed).to.be.a('string');
            expect(data.tourNeed).to.be("");
            expect(data.tourStartDate).to.be.a('string');
            expect(data.tourStartDate).to.be("");
            expect(data.tourTeam).to.be.a('string');
            expect(data.tourTeam).to.be("");
            expect(data.tourTitle).to.be.a('string');
            expect(data.tourTitle).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tourSearchUsingGET', function() {
        it('should call tourSearchUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for tourSearchUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.tourEndDate = "tourEndDate_example";
          opts.tourLocation = "tourLocation_example";
          opts.tourStartDate = "tourStartDate_example";
          opts.tourTeam = "tourTeam_example";

          instance.tourSearchUsingGET(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ApiDocumentation.TourSave);
              expect(data.nickname).to.be.a('string');
              expect(data.nickname).to.be("");
              expect(data.tourContent).to.be.a('string');
              expect(data.tourContent).to.be("");
              expect(data.tourEndDate).to.be.a('string');
              expect(data.tourEndDate).to.be("");
              expect(data.tourLocation).to.be.a('string');
              expect(data.tourLocation).to.be("");
              expect(data.tourNeed).to.be.a('string');
              expect(data.tourNeed).to.be("");
              expect(data.tourStartDate).to.be.a('string');
              expect(data.tourStartDate).to.be("");
              expect(data.tourTeam).to.be.a('string');
              expect(data.tourTeam).to.be("");
              expect(data.tourTitle).to.be.a('string');
              expect(data.tourTitle).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
