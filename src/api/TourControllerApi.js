/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Tour', 'model/TourSave'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Tour'), require('../model/TourSave'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDocumentation) {
      root.ApiDocumentation = {};
    }
    root.ApiDocumentation.TourControllerApi = factory(root.ApiDocumentation.ApiClient, root.ApiDocumentation.Tour, root.ApiDocumentation.TourSave);
  }
}(this, function(ApiClient, Tour, TourSave) {
  'use strict';

  /**
   * TourController service.
   * @module api/TourControllerApi
   * @version 1.0
   */

  /**
   * Constructs a new TourControllerApi. 
   * @alias module:api/TourControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the saveTourArticleUsingPOST operation.
     * @callback module:api/TourControllerApi~saveTourArticleUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tour} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveTourArticle
     * @param {Object} opts Optional parameters
     * @param {String} opts.nickname 
     * @param {String} opts.tourContent 
     * @param {String} opts.tourEndDate 
     * @param {String} opts.tourLocation 
     * @param {String} opts.tourNeed 
     * @param {String} opts.tourStartDate 
     * @param {String} opts.tourTeam 
     * @param {String} opts.tourTitle 
     * @param {module:api/TourControllerApi~saveTourArticleUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tour}
     */
    this.saveTourArticleUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'nickname': opts['nickname'],
        'tourContent': opts['tourContent'],
        'tourEndDate': opts['tourEndDate'],
        'tourLocation': opts['tourLocation'],
        'tourNeed': opts['tourNeed'],
        'tourStartDate': opts['tourStartDate'],
        'tourTeam': opts['tourTeam'],
        'tourTitle': opts['tourTitle'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Tour;

      return this.apiClient.callApi(
        '/tour-upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tourSearchUsingGET operation.
     * @callback module:api/TourControllerApi~tourSearchUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TourSave>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tourSearch
     * @param {Object} opts Optional parameters
     * @param {String} opts.tourEndDate 
     * @param {String} opts.tourLocation 
     * @param {String} opts.tourStartDate 
     * @param {String} opts.tourTeam 
     * @param {module:api/TourControllerApi~tourSearchUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TourSave>}
     */
    this.tourSearchUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'tourEndDate': opts['tourEndDate'],
        'tourLocation': opts['tourLocation'],
        'tourStartDate': opts['tourStartDate'],
        'tourTeam': opts['tourTeam'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [TourSave];

      return this.apiClient.callApi(
        '/tour', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
